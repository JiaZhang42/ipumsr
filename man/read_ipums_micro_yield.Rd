% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/micro_read_yield.r
\name{read_ipums_micro_yield}
\alias{read_ipums_micro_yield}
\alias{read_ipums_micro_list_yield}
\alias{IpumsLongYield}
\alias{IpumsListYield}
\title{Read data from an IPUMS extract in yields}
\usage{
read_ipums_micro_yield(
  ddi,
  vars = NULL,
  data_file = NULL,
  verbose = TRUE,
  var_attrs = c("val_labels", "var_label", "var_desc"),
  lower_vars = FALSE
)

read_ipums_micro_list_yield(
  ddi,
  vars = NULL,
  data_file = NULL,
  verbose = TRUE,
  var_attrs = c("val_labels", "var_label", "var_desc"),
  lower_vars = FALSE
)
}
\arguments{
\item{ddi}{Either a path to a DDI .xml file downloaded from
\href{https://www.ipums.org/}{IPUMS}, or an
\link{ipums_ddi} object parsed by \code{\link[=read_ipums_ddi]{read_ipums_ddi()}}.}

\item{vars}{Names of variables to include in the output. Accepts a
vector of names or a \link[tidyselect:language]{selection helper}.
If \code{NULL}, includes all variables in the file.

For hierarchical data, the \code{RECTYPE} variable is always included even if
unspecified.}

\item{data_file}{Path to the data (.gz) file associated with
the provided \code{ddi} file. By default, looks for the data file in the same
directory as the DDI file. If the data file has been moved, specify
its location here.}

\item{verbose}{Logical indicating whether to print progress information
to the console.}

\item{var_attrs}{Variable attributes from the DDI to add to the columns of
the output data. Defaults to all available attributes (\code{"val_labels"},
\code{"var_label"}, and \code{"var_desc"}). See \code{\link[=set_ipums_var_attributes]{set_ipums_var_attributes()}}
for more details.}

\item{lower_vars}{If reading a DDI from a file,
a logical indicating whether to convert variable names to lowercase.
Defaults to \code{FALSE} for consistency with IPUMS conventions.

This argument will be ignored if argument \code{ddi} is
an \link{ipums_ddi} object. Use \code{\link[=read_ipums_ddi]{read_ipums_ddi()}} to convert variable
names to lowercase when reading a DDI file.

If \code{lower_vars = TRUE} and \code{vars} is specified, \code{vars} should reference the
converted column names.}
}
\value{
A HipYield R6 object (see details)
}
\description{
Read a microdata dataset downloaded from the IPUMS extract system into an
object that can read and operate on a group of lines at a time.

Use these functions to read a file that is too large to store in memory at
a single time. They represent a more flexible implementation of
\code{\link[=read_ipums_micro_chunked]{read_ipums_micro_chunked()}} that makes certain operations easier, like
reading parts of multiple files at the same time, resetting to the
beginning of the file, etc.

Note that while other \verb{read_ipums_micro_*} functions
can read from .csv(.gz) or .dat(.gz) files, these functions can only read
from .dat(.gz) files.
}
\details{
These functions return a HipYield R6 object with the following methods:
\itemize{
\item \code{yield(n = 10000)} reads the next "yield" from the
data. Returns a \code{\link[tibble:tbl_df-class]{tibble}} (for
\code{read_ipums_micro_yield()}) or list of tibbles (for
\code{read_ipums_micro_list_yield()}) with up to n rows.

If fewer than n rows are left in the data, returns all remaining rows.
If no rows are left in the data, returns \code{NULL}.
\item \code{reset()} resets the data so that the next yield will read data from the
start.
\item \code{is_done()} returns a logical indicating whether all rows in the file
have been read.
\item \code{cur_pos} contains the next row number that will be read (1-indexed).
}
}
\examples{
# An example using "long" data
long_yield <- read_ipums_micro_yield(ipums_example("cps_00006.xml"))
# Get first 10 rows
long_yield$yield(10)
# Get 20 more rows now
long_yield$yield(20)
# See what row we're on now
long_yield$cur_pos
# Reset to beginning
long_yield$reset()
# Read the whole thing in chunks and count Minnesotans
total_mn <- 0
while (!long_yield$is_done()) {
  cur_data <- long_yield$yield(1000)
  total_mn <- total_mn + sum(as_factor(cur_data$STATEFIP) == "Minnesota")
}
total_mn

# Can also read hierarchical data as list:
list_yield <- read_ipums_micro_list_yield(ipums_example("cps_00010.xml"))
list_yield$yield(10)
}
\seealso{
Other ipums_read: 
\code{\link{ipums_list_files}()},
\code{\link{read_ipums_ddi}()},
\code{\link{read_ipums_micro_chunked}()},
\code{\link{read_ipums_micro}()},
\code{\link{read_ipums_sf}()},
\code{\link{read_nhgis_codebook}()},
\code{\link{read_nhgis}()}
}
\concept{ipums_read}
\section{Super classes}{
\code{\link[hipread:HipYield]{hipread::HipYield}} -> \code{\link[hipread:HipLongYield]{hipread::HipLongYield}} -> \code{IpumsLongYield}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-IpumsLongYield-new}{\code{IpumsLongYield$new()}}
\item \href{#method-IpumsLongYield-yield}{\code{IpumsLongYield$yield()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="hipread" data-topic="HipYield" data-id="is_done"><a href='../../hipread/html/HipYield.html#method-HipYield-is_done'><code>hipread::HipYield$is_done()</code></a></span></li>
<li><span class="pkg-link" data-pkg="hipread" data-topic="HipYield" data-id="reset"><a href='../../hipread/html/HipYield.html#method-HipYield-reset'><code>hipread::HipYield$reset()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-IpumsLongYield-new"></a>}}
\if{latex}{\out{\hypertarget{method-IpumsLongYield-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IpumsLongYield$new(
  ddi,
  vars = NULL,
  data_file = NULL,
  verbose = TRUE,
  var_attrs = c("val_labels", "var_label", "var_desc"),
  lower_vars = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-IpumsLongYield-yield"></a>}}
\if{latex}{\out{\hypertarget{method-IpumsLongYield-yield}{}}}
\subsection{Method \code{yield()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IpumsLongYield$yield(n = 10000)}\if{html}{\out{</div>}}
}

}
}
\section{Super classes}{
\code{\link[hipread:HipYield]{hipread::HipYield}} -> \code{\link[hipread:HipListYield]{hipread::HipListYield}} -> \code{IpumsListYield}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-IpumsListYield-new}{\code{IpumsListYield$new()}}
\item \href{#method-IpumsListYield-yield}{\code{IpumsListYield$yield()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="hipread" data-topic="HipYield" data-id="is_done"><a href='../../hipread/html/HipYield.html#method-HipYield-is_done'><code>hipread::HipYield$is_done()</code></a></span></li>
<li><span class="pkg-link" data-pkg="hipread" data-topic="HipYield" data-id="reset"><a href='../../hipread/html/HipYield.html#method-HipYield-reset'><code>hipread::HipYield$reset()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-IpumsListYield-new"></a>}}
\if{latex}{\out{\hypertarget{method-IpumsListYield-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IpumsListYield$new(
  ddi,
  vars = NULL,
  data_file = NULL,
  verbose = TRUE,
  var_attrs = c("val_labels", "var_label", "var_desc"),
  lower_vars = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-IpumsListYield-yield"></a>}}
\if{latex}{\out{\hypertarget{method-IpumsListYield-yield}{}}}
\subsection{Method \code{yield()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IpumsListYield$yield(n = 10000)}\if{html}{\out{</div>}}
}

}
}
