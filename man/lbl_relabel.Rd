% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lbl_helpers.r
\name{lbl_relabel}
\alias{lbl_relabel}
\alias{lbl_collapse}
\title{Modify value labels for a labelled vector}
\usage{
lbl_relabel(x, ...)

lbl_collapse(x, .fun)
}
\arguments{
\item{x}{A \code{\link[haven:labelled]{labelled}} vector}

\item{...}{Arbitrary number of two-sided formulas.

The left hand side should be a label placeholder created with \code{\link[=lbl]{lbl()}} or a
value that already exists in the data.

The right hand side should be a function taking \code{.val} and \code{.lbl}
arguments that evaluates to \code{TRUE} for all
cases that should receive the label specified on the left hand side.
Can be provided as an anonymous function or formula.

See examples.}

\item{.fun}{A function taking \code{.val} and \code{.lbl} arguments that returns
the value associated with an existing label in the vector. Input values to
this function will be relabeled with the label of the function's output
value. Can be provided as an anonymous function or formula. See examples.}
}
\value{
A \code{\link[haven:labelled]{labelled}} vector
}
\description{
Update the mapping between values and labels in a
\code{\link[haven:labelled]{labelled}} vector. These functions allow you to
simultaneously update data values and the existing value labels.
Modifying data values directly does not result in updated value labels.

Use \code{lbl_relabel()} to manually specify new value/label mappings. This
allows for the addition of new labels.

Use \code{lbl_collapse()} to collapse detailed labels into more general
categories. Values can be grouped together and associated with individual
labels that already exist in the \code{labelled} vector.

Unlabelled values will be converted to \code{NA}.
}
\examples{
x <- haven::labelled(
  c(10, 10, 11, 20, 30, 99, 30, 10),
  c(Yes = 10, `Yes - Logically Assigned` = 11, No = 20, Maybe = 30, NIU = 99)
)

# Add new value/label pairs that collect multiple existing labels
lbl_relabel(
  x,
  lbl(10, "Yes/Yes-ish") ~ .val \%in\% c(10, 11),
  lbl(90, "???") ~ .val == 99 | .lbl == "Maybe"
)


# For values that already exist, you can specify the value directly.
# Convert all cases with value 11 to value 10 and associate with 10's label:
lbl_relabel(x, 10 ~ .val == 11)

# Use single argument in `lbl` to update the label while leaving values
# unchanged
lbl_relabel(x, lbl("Yes") ~ .val == 11)

# Collapse labels to regroup:
lbl_collapse(x, ~(.val \%/\% 10) * 10)
lbl_collapse(x, ~ifelse(.val == 10, 11, .val))
}
